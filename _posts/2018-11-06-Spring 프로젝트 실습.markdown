---
title: Spring 프로젝트 실습
author: jinow
cover: "/assets/posts/1.jpg"
categories: Spring
layout: post
date: '2018-11-06 21:00:00'
---

이번 시간에는 XML을 통하여서 **bean객체**를 생성하고, 생성된 객체를 **IOC 컨테이너**로부터 불러와 사용하는 것을 실습해보도록 하겠다.

### 자바 파일을 이용한 프로그램 실행
bean 객체를 사용하는 방식과 비교하기 위해 먼저 자바 파일을 통한 프로그램을 실행시켜본다.

```
public class MyCar {
	public void drive() {
		System.out.println("let's ride my car");
	}
}
```

```
public class MyClass {
	public static void main(String[] args) {
		MyCar mycar = new MyCar();
		mycar.drive();
	}
}
```
생성자를 이용하여 drive 메서드를 실행 시키는 지극히 일반적인 코드로 생성된 객체의 메서드를 잘 실행하고 있다.

### XML을 통한 객체 생성 프로그램 실행  
지난시간에 우리는 스프링에서 존재하는 컨테이너에 대해 알아보았고, 컨테이너를 통해서 bean 객체가 생성되고 조립(DI/IOC)된다는 것을 확인하였다.
이제 직접 xml을 통하여 spring container안에 bean 객체를 생성하고 그것을 사용해보도록 할것이다.

1) xml 파일생성   
```
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 		http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="mycar" class="testPjt01.MyCar" />
</beans>

```

2) 컨테이너에 생성된 빈객체를 가져다가 사용
```
package testPjt01;

import org.springframework.context.support.GenericXmlApplicationContext;

public class MyClass {
	public static void main(String[] args) {

		//컨테이너 리소스를 불러온다
		GenericXmlApplicationContext ctx =
				new GenericXmlApplicationContext("classpath:applicationContext.xml");

		//bean객체 가져온다 (id 입력)  
		MyCar mycar = ctx.getBean("mycar", MyCar.class);
		mycar.drive();

		ctx.close();
	}
}

```

두개의 케이스의 실행결과가 동일한 것을 알 수 있다.
두번째의 방식은 앞시간에 설명한 바와 같이 spring 컨테이너를 통하여 메모리에 로딩된 bean객체를 가져와 사용하는 방식이다. 

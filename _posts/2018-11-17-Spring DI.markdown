---
title: Spring DI
author: jinow
cover: "/assets/posts/1.jpg"
categories: Spring
layout: post
date: '2018-11-17 23:18:25'
---

DI란 Dependency Injection의 줄임말, 즉 의존성을 주입한다는 것을 의미한다. 그렇다면 의존성이라는 것은 무엇일까? 의존관계는 말 그대로 객체와 객체 간에 의존하고 있음을 의미한다.  

다음 코드를 통해 객체간의 의존관계가 무엇인지를 알아보도록 하자.
```
package di;

public class Battery {
	protected String name;
	protected int capacity;
}
```
```
package di;

public class BatteryA extends Battery {

	public BatteryA() {
		this.name = "A배터리";
		this.capacity = 10;
	}
}
```
```
package di;

public class BatteryB extends Battery {

	public BatteryB() {
		this.name = "B배터리";
		this.capacity = 30;
	}
}
```
장난감에 사용할 A배터리와 B배터리가 있고, 각각의 용량은 10, 30 이다.  

```
package di;

public class ElectronicToy {
	private Battery battery;

	public ElectronicToy() {
		battery = new BatteryA();
	}

	//장난감이 장착한 배터리의 스팩을 보여준다.
	public void showBatterySpec() {
		System.out.println("battery name : " + battery.name);
		System.out.println("battery capacity : " + battery.capacity);
	}
}
```
전자 장난감을 뜻하는 ElectoricToy 클래스가 있다고 가정하자. 전자 장난감은 배터리가 있어야 돌아가기 때문에 배터리를 필요로 하고, 해당 클래스는 A배터리로 사용하고 있다. 따라서 ElectroicToy 클래스와 Battery 클래스는 서로에 대해 의존하고 있고, 우리는 이것을 **의존관계**를 갖고 있다고 한다.   

```
package di;

public class ToyCreateExam {
	public static void main(String[] args) {

		ElectronicToy toy = new ElectronicToy();
		toy.showBatterySpec();

		//10번 라인 에러.. 배터리 교체불가
		//toy.battery = new BatteryB();

	}
}
```
```
battery name : A배터리
battery capacity : 10
```
그렇다면 main함수를 통해 전자 장난감을 생성하여 배터리의 스팩을 살펴보도록 하자. 장난감은 A배터리를 사용하고 있기 때문에 해당 메서드를 실행 시 A배터리에 대한 스팩을 보여주고 있다.   

만약 이 장난감의 배터리를 다른 베터리(BatteryB)로 교체를 하고싶으면 어떻게 해야할까? 현재의 구조에서는 배터리를 교체할 수 없다. 왜냐하면 해당 장난감은 배터리 일체형 장난감이기 때문이다. 따라서 배터리를 교체할 수 있도록 다음과 같이 코드를 개선하였다.
```
package di;

public class ElectronicToy {
	private Battery battery;

	public ElectronicToy() {
		battery = new BatteryA();
	}

	//장난감이 장착한 배터리의 스팩을 보여준다.
	public void showBatterySpec() {
		System.out.println("battery name : " + battery.name);
		System.out.println("battery capacity : " + battery.capacity);
	}

	//의존성 주입
	public void setBattery(Battery battery) {
		this.battery = battery;
	}
}
```
우리가 잘 알고있는 setter함수를 추가하였다.
```
package di;

public class ToyCreateExam {
	public static void main(String[] args) {

		//장난감 생성
		ElectronicToy toy = new ElectronicToy();

		//배터리 교체  
		Battery changeBattery = new BatteryB();
		toy.setBattery(changeBattery);

		toy.showBatterySpec();
	}
}
```
```
battery name : B배터리
battery capacity : 30
```
이번에는 배터리를 B배터리로 교체하는데 성공하였다. 이처럼 <U>의존관계에 있는 배터리를 직접 객체에 주입하는 방식으로 속성을 변경하는 것을</U> ** 의존성 주입 ** <U>이라고 한다.</U>

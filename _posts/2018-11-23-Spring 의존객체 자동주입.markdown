---
title: Spring 의존객체 자동주입
author: jinow
cover: "/assets/posts/1.jpg"
categories: Spring
layout: post
date: '2018-11-23 23:18:25'
---

지난 시간에 Spring DI에 대해 다루었고, 스프링 컨테이너 안에서 어떠한 방식으로 의존성 주입이 동작하는지 살펴보았다.  
이번 시간에는 **어노테이션**을 통하여 컨테이너 안에서 의존객체를 자동으로 주입하는 방식에 대해 알아보도록 하겠다.

## 목차
[1.1 @Autowired를 통한 자동 주입](#autowired를-통한-자동-주입)  
[1.2 @Resource를 통한 자동주입](#resource를-통한-자동주입)    
[1.3 @Qualifier를 통한 의존객체 선택](#qualifier를-통한-의존객체-선택)  
[정리](#정리)  

---
### @Autowired를 통한 자동 주입
@Autowired는 주입하려고 하는 객체의 **타입**이 일치하는 객체를 자동으로 주입한다.  
지난시간에 실습하였던 constructorToy와 setterToy 빈 객체를 다시 한번 사용하도록 하겠다. 기억이 안나는 분들은 이전 post를 다시 한번 살펴보도록 한다.  

```
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 		http://www.springframework.org/schema/beans/spring-beans.xsd
 		http://www.springframework.org/schema/context
 		http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config />

	<bean id = "batteryA" class = "di.BatteryA" />

	<bean id = "constructorToy" class = "di.annotation.ElectronicToy" />
	<bean id = "setterToy" class = "di.annotation.ElectronicToy" />


</beans>
```
1. context 스키마 추가
2. ```<context:annotation-config />``` 추가
3. ```<constructor-arg>```,```<property>``` 로 명시되어 있던 배터리 객체 삭제

```
package di.annotation;

import org.springframework.beans.factory.annotation.Autowired;

import di.*;

public class ElectronicToy {
	@Autowired
	private Battery battery;

	public ElectronicToy() {
		System.out.println("toy 생성 ");
	}
	//생성자를 통한 의존성 주입
	@Autowired
	public ElectronicToy(Battery battery) {
		this();
		System.out.println("생성자를 통한 의존성 주입" );
		this.battery = battery;
	}

	//setter를 통한 의존성 주입
	@Autowired
	public void setBattery(Battery battery) {
		System.out.println("setter함수를 통한 의존성 주입" );
		this.battery = battery;
	}

	//장난감이 장착한 배터리의 스팩을 보여준다.
	public void showBatterySpec() {
		System.out.println("battery name : " + battery.getName());
		System.out.println("battery capacity : " + battery.getCapacity());
	}

}
```
1. 생성자 주입 : 생성자 함수에 @Autowired 추가
2. setter 주입 : 속성, 및 setter 함수에 @Autowired 추가
실행시켰을때 이전 포스트의 결과와 동일함을 확인할 수 있다.

---
### @Resource를 통한 자동주입
@Resource는 주입하려고 하는 객체의 **이름**이 일치하는 객체를 자동으로 주입한다.
```
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 		http://www.springframework.org/schema/beans/spring-beans.xsd
 		http://www.springframework.org/schema/context
 		http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config />

	<bean id = "batterB" class = "di.BatteryB" />
	<bean id = "setterToy" class = "di.annotation.ElectronicToy" />


</beans>
```
@Resource 는 setter 주입에만 사용이 가능하기 떄문에, setterToy만 남겨두고 주입할 베터리는 batteryB를 선택하였다.

```
package di.annotation;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;

import di.*;

public class ElectronicToy {

	@Resource
	private Battery batteryB;

	public ElectronicToy() {
		System.out.println("toy 생성 ");
	}
	//생성자를 통한 의존성 주입
	public ElectronicToy(Battery battery) {
		this();
		System.out.println("생성자를 통한 의존성 주입" );
		this.batteryB = battery;
	}

	//setter를 통한 의존성 주입
	@Resource
	public void setBattery(Battery battery) {
		System.out.println("setter함수를 통한 의존성 주입" );
		this.batteryB = battery;
	}

	//장난감이 장착한 배터리의 스팩을 보여준다.
	public void showBatterySpec() {
		System.out.println("battery name : " + batteryB.getName());
		System.out.println("battery capacity : " + batteryB.getCapacity());
	}

}
```
1. 속성과 setter 메서드에 @Resource 어노테이션을 추가하였다.
2. battery변수의 이름을 설정파일에 있는 batteryB 와 일치시켰다.

```
package di.annotation;

import org.springframework.context.support.GenericXmlApplicationContext;

public class ToyCreateExam {
	public static void main(String[] args) {
		//컨테이너 생성  
		//컨테이너 리소스를 불러온다
		GenericXmlApplicationContext ctx =
			new GenericXmlApplicationContext("classpath:applicationContextUseAutowired.xml");

		System.out.println("-------객체 호출 --------");

		//setterToy bean 객체를 호출
		ElectronicToy strToy1 = ctx.getBean("setterToy", ElectronicToy.class);

	}
}
```
```
Nov 27, 2018 8:18:25 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions
정보: Loading XML bean definitions from class path resource [applicationContextUseAutowired.xml]
Nov 27, 2018 8:18:25 AM org.springframework.context.support.GenericXmlApplicationContext prepareRefresh
정보: Refreshing org.springframework.context.support.GenericXmlApplicationContext@2dda6444: startup date [Tue Nov 27 08:18:25 KST 2018]; root of context hierarchy
battery 객체생성
toy 생성
setter함수를 통한 의존성 주입
-------객체 호출 --------
```
다음과 같이 컨테이너 리소스를 불러왔을때 setterToy 객체가 생성되었고 setter함수를 통한 의존성 주입이 실행됨을 확인할 수 있다.


---
### @Qualifier를 통한 의존객체 선택  
만약에 스프링 컨테이너 안에 배터리A와 배터리B가 전부 존재한다고 가정해보자. 그렇다면 장난감은 A와 B 중 어떠한 배터리를 선택해서 주입을 할까? 혹은 원하는 배터리를 선택하려면 어떠한 방법으로 명시를 해줘야 할까?
다음 코드를 통하여서 살펴보자.
```
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 		http://www.springframework.org/schema/beans/spring-beans.xsd
 		http://www.springframework.org/schema/context
 		http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config />

	<bean id = "batterA" class = "di.BatteryA" />
	<bean id = "batterB" class = "di.BatteryB" />
	<bean id = "constructorToy" class = "di.annotation.ElectronicToy" />
</beans>
```
설정파일 안에는 batteryA와 batteryB가 모두 들어있다.
그리고 장난감은 생성자주입 방식의 장난감을 정의하였다.
```
package di.annotation;

import org.springframework.context.support.GenericXmlApplicationContext;

public class ToyCreateExam {
	public static void main(String[] args) {
		//컨테이너 생성  
		//컨테이너 리소스를 불러온다
		GenericXmlApplicationContext ctx =
			new GenericXmlApplicationContext("classpath:applicationContextUseQualifier.xml");

		System.out.println("-------객체 호출 --------");

		//Toy bean 객체를 호출
		ElectronicToy ctrToy1 = ctx.getBean("constructorToy", ElectronicToy.class);

	}
}
```
#### 실행결과
```
battery 객체생성
battery 객체생성
Nov 28, 2018 8:21:38 AM org.springframework.context.support.GenericXmlApplicationContext refresh
경고: Exception encountered during context initialization - cancelling refresh attempt
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'constructorToy' defined in class path resource [applicationContextUseQualifier.xml]: Unsatisfied dependency expressed through constructor argument with index 0 of type [di.Battery]: : No qualifying bean of type [di.Battery] is defined: expected single matching bean but found 2: batterA,batterB; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type [di.Battery] is defined: expected single matching bean but found 2: batterA,batterB
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:751)
```
해당코드의 실행결과는 다음과 같다. battery 2개가 생성이 잘 되었지만 Toy 안에 주입할 배터리 객체를 선택하지 못하였다.  

> No qualifying bean of type [di.Battery] is defined: expected single matching bean but found 2: batterA,batterB;

이러할 경우 ```@Qualifier``` 어노테이션을 통해 장난감에 주입할 배터리의 식별자를 명시해주어 선택 해줘야 한다.


---
### 정리
* Autowired :
  - 객체의 **타입**을 보고 찾아냄  
  - 생성자,프로퍼티 어디서나 사용 가능
* Resource :
  - 객체의 **이름**을 보고 찾아냄
  - 프로퍼티에서만 사용가능

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Centrarium</title>
    <description>A simple yet classy theme for your Jekyll website or blog.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 12 Nov 2018 08:09:01 +0900</pubDate>
    <lastBuildDate>Mon, 12 Nov 2018 08:09:01 +0900</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Java Annotation</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;어노테이션은 Java의 &lt;strong&gt;메타데이터&lt;/strong&gt;를 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 07 Nov 2018 00:56:59 +0900</pubDate>
        <link>http://localhost:4000/java/2018/11/07/Java-Annotation.html</link>
        <guid isPermaLink="true">http://localhost:4000/java/2018/11/07/Java-Annotation.html</guid>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Spring 프로젝트 실습</title>
        <description>&lt;p&gt;이번 시간에는 XML을 통하여서 &lt;strong&gt;bean객체&lt;/strong&gt;를 생성하고, 생성된 객체를 &lt;strong&gt;IOC 컨테이너&lt;/strong&gt;로부터 불러와 사용하는 것을 실습해보도록 하겠다.&lt;/p&gt;

&lt;h3 id=&quot;자바-파일을-이용한-프로그램-실행&quot;&gt;자바 파일을 이용한 프로그램 실행&lt;/h3&gt;
&lt;p&gt;bean 객체를 사용하는 방식과 비교하기 위해 먼저 자바 파일을 통한 프로그램을 실행시켜본다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyCar {
	public void drive() {
		System.out.println(&quot;let's ride my car&quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyClass {
	public static void main(String[] args) {
		MyCar mycar = new MyCar();
		mycar.drive();
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;생성자를 이용하여 drive 메서드를 실행 시키는 지극히 일반적인 코드로 생성된 객체의 메서드를 잘 실행하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;xml을-통한-객체-생성-프로그램-실행&quot;&gt;XML을 통한 객체 생성 프로그램 실행&lt;/h3&gt;
&lt;p&gt;지난시간에 우리는 스프링에서 존재하는 컨테이너에 대해 알아보았고, 컨테이너를 통해서 bean 객체가 생성되고 조립(DI/IOC)된다는 것을 확인하였다.
이제 직접 xml을 통하여 spring container안에 bean 객체를 생성하고 그것을 사용해보도록 할것이다.&lt;/p&gt;

&lt;p&gt;1) xml 파일생성&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans
 		http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mycar&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testPjt01.MyCar&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) 컨테이너에 생성된 빈객체를 가져다가 사용&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testPjt01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;support&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenericXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;컨테이너&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;리소스를&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;불러온다&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;GenericXmlApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;classpath:applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;객체&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;가져온다&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;입력&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
		&lt;span class=&quot;n&quot;&gt;MyCar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mycar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mycar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;mycar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두개의 케이스의 실행결과가 동일한 것을 알 수 있다.
두번째의 방식은 앞시간에 설명한 바와 같이 spring 컨테이너를 통하여 메모리에 로딩된 bean객체를 가져와 사용하는 방식이다.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Nov 2018 21:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2018/11/06/Spring-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%EC%8A%B5.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2018/11/06/Spring-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%EC%8A%B5.html</guid>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Spring 개요</title>
        <description>&lt;h3 id=&quot;spring-framework-개요&quot;&gt;Spring Framework 개요&lt;/h3&gt;

&lt;h4 id=&quot;1-정의&quot;&gt;1. 정의&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크&lt;br /&gt;
&lt;strong&gt;Framework&lt;/strong&gt; : 틀, 즉 개발자가 개발(기능구현)에만 집중할 수 있도록 틀을 만들어줌&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉, 스프링은 자바 기반의 개발을 편하게 해주는 기술로 개발자가 was 관리, db 커넥션 및 리소스 관리 등을 신경쓰지 않고 개발에만 집중할 수 있도록 도와준다. 개발자는 스프링에서 제공하는 여러 모듈들 중 필요한 것들만 독립적으로 편리하게 사용이 가능하다.&lt;/p&gt;
&lt;h4 id=&quot;2-spring-framework-주요기능&quot;&gt;2. Spring Framework 주요기능&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DI&lt;/strong&gt; : 의존성 주입 (Dependency Injection)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AOP&lt;/strong&gt; : 관점지향 프로그래밍 (Aspect Oriented Programming)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt; : Model, View, Controller를 분리&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-스프링-프레임워크에서-제공하고-있는-모듈&quot;&gt;3. 스프링 프레임워크에서 제공하고 있는 모듈&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;spring-core&lt;/strong&gt; : 스프링 핵심인 DI 와 IOC를 제공&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;spring-aop&lt;/strong&gt; : AOP 구현기능 제공&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;spring-jdbc&lt;/strong&gt; : jdbc를 쉽게 다룰 수 있는 기능 제공&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;spring-tx&lt;/strong&gt; : 스프링에서 제공하는 트랜젝션 관련기능 제공&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;spring-webmvc&lt;/strong&gt; : spring에서 제공하는 Controller, View를 이용한 스프링 MVC 기능구현 제공
    &lt;blockquote&gt;
      &lt;p&gt;모듈에 대한 의존 설정은 XML파일을 이용하여 개발자가 직접 관리가 가능하다. (maven 프로젝트)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;4-스프링-컨테이너--ioc---inversion-of-control-&quot;&gt;4. 스프링 컨테이너 ( IOC - Inversion Of Control )&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;스프링에서 객체를 생성하고 조립하는 컨테이너로, 컨테이를 통해 생성된 객체를 빈(Bean)이라고 부른다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/ioc container.png&quot; alt=&quot;ioc container&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개발환경-구축&quot;&gt;개발환경 구축&lt;/h3&gt;
&lt;h4 id=&quot;1jdkjava-development-kit-이클립스-설치&quot;&gt;1.JDK(Java Development Kit), 이클립스 설치&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/jdk구조.png&quot; alt=&quot;jdk&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JDK : Java &lt;strong&gt;개발&lt;/strong&gt;을 위한 도구&lt;/li&gt;
  &lt;li&gt;JRE : Java 프로그램 &lt;strong&gt;실행&lt;/strong&gt;을 위한 도구&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;JDK = JRE + Development Tool (&lt;code class=&quot;highlighter-rouge&quot;&gt;java&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;javac&lt;/code&gt;)&lt;br /&gt;
JRE = JVM + Library Classes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2-maven-프로젝트-생성&quot;&gt;2. maven 프로젝트 생성&lt;/h4&gt;
&lt;p&gt;spring을 사용하기 위해서는 앞서 설명한 spring모듈들이 포함된 라이브러리들이 필요하다.&lt;br /&gt;
라이브러리들을 편리하게 로컬에서 다운을 받기 위해 maven프로젝트를 생성하여 spring을 사용하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/maven생성.png&quot; alt=&quot;maven&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-pomxml-작성&quot;&gt;3. pom.xml 작성&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;(Project Object Model)은 메이븐의 기본이 되는 파일이다. 한마디로 정의하면 프로젝트의 주요정보들이 포함된 곳이라고 할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;project&lt;/strong&gt; : pom.xml 파일의 최상위 요소&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;modelVersion&lt;/strong&gt; : POM의 현재버젼. 자동으로 업데이트 되기도 한다&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;group-id&lt;/strong&gt; : 프로젝트 식별 id&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;artifact-id&lt;/strong&gt; : 버젼정보를 생략한 jar 파일의 이름&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;packaging&lt;/strong&gt; : 해당 artifact의 package type (e.g JAR, WAR, EAR, etc)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;version&lt;/strong&gt; : 해당 artifact의 버젼(&lt;code class=&quot;highlighter-rouge&quot;&gt;1.0&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.1&lt;/code&gt; …)&lt;/li&gt;
  &lt;li&gt;
    &lt;dl&gt;
      &lt;dt&gt;&lt;strong&gt;maven 컴파일러 버젼 설정&lt;/strong&gt;&lt;/dt&gt;
      &lt;dd&gt;maven의 기본 life cycle에서 compile되는 시기에 실행되는 compile 플러그인은 별도 설정이 없을 경우, 자바 1.5버젼을 기준으로 컴파일을 하기 때문에 간혹 에러가 발생할 경우가 있다. 이에 따라 source와 target 옵션으로 버젼을 수정해준다.&lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
	&amp;lt;groupId&amp;gt;spring4&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;testPjt01&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
	&amp;lt;dependencies&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;4.1.0.RELEASE&amp;lt;/version&amp;gt;
		&amp;lt;/dependency&amp;gt;
	&amp;lt;/dependencies&amp;gt;
	&amp;lt;build&amp;gt;
		&amp;lt;plugins&amp;gt;
			&amp;lt;plugin&amp;gt;
				&amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
				&amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt;
				&amp;lt;configuration&amp;gt;
					&amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
					&amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
					&amp;lt;encoding&amp;gt;utf-8&amp;lt;/encoding&amp;gt;
				&amp;lt;/configuration&amp;gt;
			&amp;lt;/plugin&amp;gt;
		&amp;lt;/plugins&amp;gt;
	&amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/maven로컬경로.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;spring-context 모듈만 작성을 하였지만 그것과 의존관계에 있는 라이브러리를 자동으로 가져온다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;4-maven-프로젝트-경로&quot;&gt;4. maven 프로젝트 경로&lt;/h4&gt;
&lt;p&gt;폴더 경로에 따른 역할이 다르기 때문에 개발시 항상 기억을 하도록 하자.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;src/main
    &lt;ul&gt;
      &lt;li&gt;java : 실제 개발할 기능 구현&lt;/li&gt;
      &lt;li&gt;resources : 보조적인 파일, build 및 자원 관련 (&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 06 Nov 2018 00:56:59 +0900</pubDate>
        <link>http://localhost:4000/spring/2018/11/06/spring-%EA%B0%9C%EC%9A%94.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2018/11/06/spring-%EA%B0%9C%EC%9A%94.html</guid>
        
        
        <category>Spring</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;h2 id=&quot;adding-new-posts&quot;&gt;Adding New Posts&lt;/h2&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;h3 id=&quot;tags-and-categories&quot;&gt;Tags and Categories&lt;/h3&gt;

&lt;p&gt;If you list one or more categories or tags in the front matter of your post, they will be included with the post on the page as links. Clicking the link will bring you to an auto-generated archive page for the category or tag, created using the &lt;a href=&quot;https://github.com/jekyll/jekyll-archives&quot;&gt;jekyll-archive&lt;/a&gt; gem.&lt;/p&gt;

&lt;h3 id=&quot;cover-images&quot;&gt;Cover Images&lt;/h3&gt;

&lt;p&gt;To add a cover image to your post, set the “cover” property in the front matter with the relative URL of the image (i.e. &lt;code&gt;cover: &quot;/assets/cover_image.jpg&quot;&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;code-snippets&quot;&gt;Code Snippets&lt;/h3&gt;

&lt;p&gt;You can use &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt; to add syntax highlight code snippets:&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;Liquid&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;{% highlight &amp;lt;language&amp;gt; %}&lt;/code&gt; tag to add syntax highlighting to code snippets.&lt;/p&gt;

&lt;p&gt;For instance, this template…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% highlight javascript %}    
function demo(string, times) {    
  for (var i = 0; i &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;na&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;    
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;    
&lt;span class=&quot;na&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&quot;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;{%&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;endhighlight&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…will come out looking like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello, world!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Syntax highlighting is done using &lt;a href=&quot;https://highlightjs.org/&quot;&gt;highlight.js&lt;/a&gt;. You can change the active theme in &lt;a href=&quot;https://github.com/bencentra/centrarium/blob/2dcd73d09e104c3798202b0e14c1db9fa6e77bc7/_includes/head.html#L15&quot;&gt;head.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;Lightbox has been enabled for images. To create the link that’ll launch the lightbox, add &lt;code&gt;data-lightbox&lt;/code&gt; and &lt;code&gt;data-title&lt;/code&gt; attributes to an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag around your &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag. The result is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//bencentra.com/assets/images/falcon9_large.jpg&quot; data-lightbox=&quot;falcon9-large&quot; data-title=&quot;Check out the Falcon 9 from SpaceX&quot;&gt;
  &lt;img src=&quot;//bencentra.com/assets/images/falcon9_small.jpg&quot; title=&quot;Check out the Falcon 9 from SpaceX&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, check out the &lt;a href=&quot;http://lokeshdhakar.com/projects/lightbox2/&quot;&gt;Lightbox&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Apr 2015 17:43:59 +0900</pubDate>
        <link>http://localhost:4000/jekyll/2015/04/18/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/jekyll/2015/04/18/welcome-to-jekyll.html</guid>
        
        <category>jekyll</category>
        
        <category>welcome</category>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>Dummy Post</title>
        <description>&lt;p&gt;This is just a dummy post. Lorem ipsum and all the rest.&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Apr 2015 17:43:59 +0900</pubDate>
        <link>http://localhost:4000/dummy/2015/04/18/dummy.html</link>
        <guid isPermaLink="true">http://localhost:4000/dummy/2015/04/18/dummy.html</guid>
        
        
        <category>Dummy</category>
        
      </item>
    
  </channel>
</rss>
